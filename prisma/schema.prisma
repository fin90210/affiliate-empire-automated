generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/affiliate_empire_automated/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  category    String
  tags        String[]
  published   Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("blog_posts")
}

model AffiliateLink {
  id          String   @id @default(cuid())
  name        String
  url         String
  category    String
  description String?
  clicks      Int      @default(0)
  conversions Int      @default(0)
  earnings    Float    @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  earnings_records Earnings[]
  
  @@map("affiliate_links")
}

model EmailSubscriber {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String?
  lastName    String?
  source      String?  // Where they subscribed from
  tags        String[]
  active      Boolean  @default(true)
  confirmed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_subscribers")
}

model Analytics {
  id        String   @id @default(cuid())
  page      String
  views     Int      @default(1)
  date      DateTime @default(now())
  
  @@map("analytics")
}

model Earnings {
  id            String   @id @default(cuid())
  affiliateId   String
  amount        Float
  commission    Float
  description   String?
  date          DateTime @default(now())
  
  affiliate     AffiliateLink @relation(fields: [affiliateId], references: [id])
  
  @@map("earnings")
}

model SocialPost {
  id          String   @id @default(cuid())
  platform    String   // twitter, facebook, instagram, etc
  content     String
  mediaUrl    String?
  scheduled   DateTime?
  posted      Boolean  @default(false)
  engagement  Int      @default(0)
  createdAt   DateTime @default(now())
  
  @@map("social_posts")
}
