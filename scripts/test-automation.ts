// Simple test script to verify automation setup
import OpenAI from 'openai';

// Health check for all automation systems
async function healthCheck(): Promise<void> {
  console.log('üè• Running automation health check...');
  
  const checks = {
    openai: !!process.env.OPENAI_API_KEY,
    resend: !!process.env.RESEND_API_KEY,
    twitter: !!(process.env.TWITTER_API_KEY && process.env.TWITTER_ACCESS_TOKEN),
    linkedin: !!(process.env.LINKEDIN_ACCESS_TOKEN && process.env.LINKEDIN_PERSON_ID),
    facebook: !!(process.env.FACEBOOK_ACCESS_TOKEN && process.env.FACEBOOK_PAGE_ID),
    database: !!process.env.DATABASE_URL,
  };

  console.log('\nüîß SYSTEM STATUS:');
  console.log(`OpenAI API: ${checks.openai ? '‚úÖ' : '‚ùå'}`);
  console.log(`Resend Email: ${checks.resend ? '‚úÖ' : '‚ùå'}`);
  console.log(`Twitter API: ${checks.twitter ? '‚úÖ' : '‚ùå'}`);
  console.log(`LinkedIn API: ${checks.linkedin ? '‚úÖ' : '‚ùå'}`);
  console.log(`Facebook API: ${checks.facebook ? '‚úÖ' : '‚ùå'}`);
  console.log(`Database: ${checks.database ? '‚úÖ' : '‚ùå'}`);

  const healthyServices = Object.values(checks).filter(Boolean).length;
  console.log(`\nüìä Health Score: ${healthyServices}/6 services operational`);

  if (healthyServices < 3) {
    console.log('‚ö†Ô∏è WARNING: Multiple critical services are down!');
  } else if (healthyServices < 6) {
    console.log('‚ö†Ô∏è Some services need attention');
  } else {
    console.log('üéâ All systems operational!');
  }

  // Test OpenAI connection if API key is available
  if (checks.openai) {
    try {
      console.log('\nü§ñ Testing OpenAI connection...');
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });
      
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: 'Say "Hello from Affiliate Empire automation!"' }],
        max_tokens: 20,
      });
      
      console.log('‚úÖ OpenAI test successful:', response.choices[0].message.content);
    } catch (error) {
      console.log('‚ùå OpenAI test failed:', error);
    }
  }
}

// Simple content generation test
async function testContentGeneration(): Promise<void> {
  if (!process.env.OPENAI_API_KEY) {
    console.log('‚ùå OpenAI API key not configured. Skipping content generation test.');
    return;
  }

  try {
    console.log('üìù Testing content generation...');
    
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const prompt = `Write a short blog post title about affiliate marketing (max 10 words)`;
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 50,
    });

    const title = response.choices[0].message.content?.trim() || 'Test Title';
    console.log('‚úÖ Generated title:', title);
    
    // Save test content to file
    const fs = await import('fs/promises');
    const testContent = `# ${title}\n\nThis is a test blog post generated by the automation system on ${new Date().toISOString()}.\n\nThe automation system is working correctly!`;
    
    await fs.writeFile('content/test-post.md', testContent);
    console.log('‚úÖ Test content saved to content/test-post.md');
    
  } catch (error) {
    console.log('‚ùå Content generation test failed:', error);
  }
}

// Main function
async function main(): Promise<void> {
  const command = process.argv[2];
  
  // Load environment variables
  require('dotenv').config();
  
  try {
    switch (command) {
      case 'health':
        await healthCheck();
        break;
      case 'content':
        await testContentGeneration();
        break;
      default:
        console.log('ü§ñ Affiliate Empire Automation Test');
        console.log('\nAvailable commands:');
        console.log('  health   - Check system health');
        console.log('  content  - Test content generation');
        console.log('\nExample: npm run test:automation health');
        await healthCheck();
    }
  } catch (error) {
    console.error('‚ùå Test error:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}
